// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

// Box-shadow handling
@mixin box-shadow($top, $left, $blur, $spread, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $spread $color;
    -moz-box-shadow:inset $top $left $blur $spread $color;
    box-shadow:inset $top $left $blur $spread $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $spread $color;
    -moz-box-shadow: $top $left $blur $spread $color;
    box-shadow: $top $left $blur $spread $color;
  }
}

// Background-cover handling
@mixin background-cover($positionX, $positionY) {
  background-repeat: no-repeat;
  -webkit-background-size: cover;
  -moz-background-size: cover;
  -o-background-size: cover;
  background-size: cover;
  background-position: $positionX $positionY;
}

// Background-contain handling
@mixin background-contain($positionX, $positionY) {
  background-repeat: no-repeat;
  -webkit-background-size: contain;
  -moz-background-size: contain;
  -o-background-size: contain;
  background-size: contain;
  background-position: $positionX $positionY;
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

@mixin transition($transitiontime) {
  -o-transition: $transitiontime;
  -ms-transition: $transitiontime;
  -moz-transition: $transitiontime;
  -webkit-transition: $transitiontime;
  transition: $transitiontime;
}

// Page Break Mixins
@mixin break-up($bp){
  @if $bp == sm {
    @media (min-width: $break-sm-up) {
      @content;
    }
  }
  @if $bp == md {
    @media (min-width: $break-md-up) {
      @content;
    }
  }
  @if $bp == lg {
    @media (min-width: $break-lg-up) {
      @content;
    }
  }
  @if $bp == xl {
    @media (min-width: $break-xl-up) {
      @content;
    }
  }
  @else {
    @media (min-width: $bp) {
      @content;
    }
  }
}
@mixin break-down($bp){
  @if $bp == sm {
    @media (max-width: $break-sm-down) {
      @content;
    }
  }
  @if $bp == md {
    @media (max-width: $break-md-down) {
      @content;
    }
  }
  @if $bp == lg {
    @media (max-width: $break-lg-down) {
      @content;
    }
  }
  @if $bp == xl {
    @media (max-width: $break-xl-down) {
      @content;
    }
  }
}
@mixin break-only($bp){
  @if $bp == xs {
    @media (max-width: $break-sm-down) {
      @content;
    }
  }
  @if $bp == sm {
    @media (min-width: $break-sm-up) and (max-width: $break-md-down) {
      @content;
    }
  }
  @if $bp == md {
    @media (min-width: $break-md-up) and (max-width: $break-lg-down) {
      @content;
    }
  }
  @if $bp == lg {
    @media (min-width: $break-lg-up) and (max-width: $break-xl-down) {
      @content;
    }
  }
  @if $bp == xl {
    @media (min-width: $break-xl-up) {
      @content;
    }
  }
}

// Responsive Elements
@mixin responsive-padding($position, $rem, $factor){
  padding-#{$position}: ($rem)+rem;
  @include break-up(sm) {
    padding-#{$position}: $rem + ($rem * ($factor / 4))+rem;
  }
  @include break-up(md) {
    padding-#{$position}: $rem + ($rem * ($factor / 3))+rem;
  }
  @include break-up(lg) {
    padding-#{$position}: $rem + ($rem * ($factor / 2))+rem;
  }
  @include break-up(xl) {
    padding-#{$position}: $rem + ($rem * ($factor / 1))+rem;
  }
}

@mixin responsive-margin($position, $rem, $factor){
  margin-#{$position}: ($rem)+rem;
  @include break-up(sm) {
    margin-#{$position}: $rem + ($rem * ($factor / 4))+rem;
  }
  @include break-up(md) {
    margin-#{$position}: $rem + ($rem * ($factor / 3))+rem;
  }
  @include break-up(lg) {
    margin-#{$position}: $rem + ($rem * ($factor / 2))+rem;
  }
  @include break-up(xl) {
    margin-#{$position}: $rem + ($rem * ($factor / 1))+rem;
  }
}

@mixin responsive-element-rem($element, $rem, $factor){
  #{$element}: ($rem)+rem;
  @include break-up(sm) {
    #{$element}: $rem + ($rem * ($factor / 4))+rem;
  }
  @include break-up(md) {
    #{$element}: $rem + ($rem * ($factor / 3))+rem;
  }
  @include break-up(lg) {
    #{$element}: $rem + ($rem * ($factor / 2))+rem;
  }
  @include break-up(xl) {
    #{$element}: $rem + ($rem * ($factor / 1))+rem;
  }
}
@mixin grayscale_element($value) {
  -webkit-filter: #{"grayscale(#{$value})"};
  -moz-filter: #{"grayscale(#{$value})"};
  filter:#{"grayscale(#{$value})"};
}
@mixin grayscale( $toggle: "on", $percentage: 1 ) {
  $svg-type: "matrix";
  $svg-value: "0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0";
  $ie-alpha: alpha(#{"opacity="}round( $percentage * 100 ) );

  @if $percentage != 1 {
    $svg-type: "saturate";
    $svg-value: $percentage;
  }

  @if $toggle == "on" {
    filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'#{$svg-type}\' values=\'#{$svg-value}\'/></filter></svg>#grayscale"); // Firefox 10+, Firefox on Android
    filter: gray $ie-alpha; // IE6-9
    -webkit-filter: grayscale( round( $percentage * 100% ) ); // Chrome 19+, Safari 6+, Safari 6+ iOS
    filter: grayscale( round( $percentage * 100% ) ); // Catch-all
  }

  @if $toggle == "off" {
    @if $svg-type == "saturate" {
      filter: none;
    } @else {
      filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'1 0 0 0 0, 0 1 0 0 0, 0 0 1 0 0, 0 0 0 1 0\'/></filter></svg>#grayscale");
    }
    -webkit-filter: grayscale(0%);
    filter: grayscale(0);
  }
}
@mixin opacity($value){
  $IEValue: $value*100;
  opacity: $value;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$IEValue+")";
  filter: alpha(opacity=$IEValue);
}
// Transitions
@mixin transition($property, $duration_ms, $function){
  -webkit-transition: $property $duration_ms $function;
  -moz-transition: 	$property $duration_ms $function;
  -ms-transition: 	$property $duration_ms $function;
  -o-transition: 		$property $duration_ms $function;
  transition: 		$property $duration_ms $function;
}

// Transform
@mixin transform($transforms){
  -moz-transform: 	$transforms;
  -o-transform: 		$transforms;
  -ms-transform: 		$transforms;
  -webkit-transform: 	$transforms;
  transform: 			$transforms;
}

@mixin transform_origin($origin){
  -moz-transform-origin: 		$origin;
  -o-transform-origin: 		$origin;
  -ms-transform-origin: 		$origin;
  -webkit-transform-origin: 	$origin;
  transform-origin: 			$origin;
}
// Translate
@mixin translate($x, $y){
  @include transform(translate(#{$x}, #{$y}));
}
// Scale
@mixin scale($scaleX, $scaleY){
  @include transform(scale($scaleX, $scaleY));
}
// Rotate
@mixin rotate($deg){
  @include transform(rotate(#{$deg}));
}
/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {Keyword | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
  // Direction has been omitted and happens to be a color-stop
  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
/// @throw Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.;
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
          to top          : bottom,
          to top right    : bottom left,
          to right top    : left bottom,
          to right        : left,
          to bottom right : top left,
          to right bottom : left top,
          to bottom       : top,
          to bottom left  : top right,
          to left bottom  : right top,
          to left         : right,
          to left top     : right bottom,
          to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}

// Clearfix
@mixin clearfix() {
  &::after {
    display: block;
    content: "";
    clear: both;
  }
}